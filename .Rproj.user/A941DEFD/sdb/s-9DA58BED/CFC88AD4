{
    "contents" : "# Add argument for writing output matrix as logical, numeric, factor, or integer\n# Add argument for keeping unused levels of interactions\n\n\n#' designmatrix: A package for creating design matrices with dates.\n#'\n#' The designmatrix package creates deisgn/model matrices for dates.\n#' The workhorse designMatrix function supports many differetn terms\n#' (e.g. weekday, month, leap years, holidays, etc). Some of these\n#' are in development and as yet not implemented.\n#'\n#' @section designmatrix functions:\n#' designMatrix\n#'\n#' @docType package\n#' @name designMatrix\nNULL\n#> NULL\n#' @importFrom lubridate quarter week month year wday mday\n#' @importFrom stats model.matrix\n#' @importFrom Matrix rankMatrix\n\n\n\n\n#' Create a design matrix with for the given days with the given design terms\n#'\n#' @param x A vector of dates.\n#' @param weekdays A character vector of the weekdays to include.\n#' @param months A numeric vector of the months to include.\n#' @param holidays TODO (A character vector of the holidays to include.)\n#' @param years A numeric vector of the years to include.\n#' @param interactions TODO (A character vector of the weekdays to include.)\n#' @param dayOfMonth tTODO A numeric vector of the day of the month to include.\n#' @param daysInMonth TODO A numeric vector of the days in the month to include.\n#' @param leapYear tTODO A logical that indicates whether to include a leap year indicator.\n#' @param quarters A character vector of the quarters to include.\n#' @param weeks A numeric vector to include the week number of the year.\n#' @param weekend A logical that indicates if a weekend (Saturday or Sunday) indicator should be included\n#' @param weekday A logical that indicates if a weekday (Monday through Friday) indicator should be included\n#' @param removeUnusedLevels A TODO logical that indicates if colinear terms of the return matrix should be removed by dropping columns with zero variance.\n#' @param returnType TODO A character vector indicating the data type for the return matrix. Acceptable values are \"integer\", \"factor\", \"numeric\", and \"logical\".\n#' @return The design matrix for the input dates.\n#' @examples\n#' alldates <- seq(from = as.Date(\"2000-01-01\"), to = as.Date(\"2005-10-01\"), by = \"days\")\n#'\n#' designMatrix(x = alldates, weekdays = \"all\", months = \"January\")\n#' designMatrix(x = alldates, weekdays = c(\"Wednesday\", \"Friday\"), quarters = \"all\")\n#' designMatrix(x = alldates, months = \"all\", years = c(2002, 2004))\n#' @export\ndesignMatrix <- function(x = NULL, weekdays = NULL, months = NULL,\n                         holidays = NULL, years = NULL,\n                         interactions = NULL, dayOfMonth = NULL,\n                         daysInMonth = NULL, leapYear = FALSE,\n                         quarters = NULL,\n                         weeks = NULL, weekend = FALSE,\n                         weekday = FALSE,\n                         removeUnusedLevels = FALSE,\n                         returnType = \"numeric\"){\n\n  monthnames <- c(\"January\", \"February\", \"March\", \"April\", \"May\",\n                  \"June\", \"July\", \"August\", \"September\", \"October\",\n                  \"November\", \"December\")\n  weekdaynames <- c(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n                    \"Thursday\", \"Friday\", \"Saturday\")\n  quarternames <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n\n  # Match arguments\n  # Test for empty design terms\n  if(is.null(weekdays) & is.null(months) & is.null(holidays)\n     & is.null(years) & is.null(interactions)\n     & is.null(daysInMonth) & is.null(dayOfMonth)\n     & leapYear & is.null(quarters)\n     & is.null(weeks) & !weekday & !weekend){\n    stop(\"No design terms specified\")\n  }\n  # Test for correct weekdays\n  if(length(weekdays) > 7){\n    stop(\"More than 7 weekdays were specified\")\n  }else if(length(weekdays)){\n    if(!all(is.element(weekdays, c(\"all\", weekdaynames)))){\n      stop(\"Weekdays incorrectly specified\")\n    }\n  }\n  # Test for correct months\n  if(length(months) > 12){\n    stop(\"More than 12 months were specified\")\n  }else if(length(months)){\n    if(!all(is.element(months, c(\"all\", monthnames))))\n      stop(\"Months incorrectly specified\")\n  }\n  if(length(quarters) > 4){\n    stop(\"More than 4 quarters were specified\")\n  }else if(length(quarters)){\n    if(!all(is.element(quarters, c(\"all\", quarternames))))\n      stop(\"Quarters incorrectly specified\")\n  }\n\n  # Test for x input\n  if(is.null(x)){\n    stop(\"Dates missing\")\n  }\n  if(class(x) != \"Date\"){\n    tryCatch(as.Date(x), error = stop(\"Input x cannot be coerced to a date object\"))\n    x <- as.Date(x)\n  }\n  if(!length(x)){\n    stop(\"Input x must not have zero length\")\n  }\n\n  # Create day of week, month, and day of month\n  DOW <- wday(x)\n  #DAY <- lubridate::mday(x)\n  MONTH <- month(x)\n  YEAR <- year(x)\n  QUARTER <- quarter(x)\n  WEEK <- week(x)\n  MDAY <- mday(x)\n  LY <- matrix(as.integer(leap_year(x)), nrow = length(x))\n  names(LY) <- \"LeapYear\"\n\n\n\n  # Build design matrices for DOW, month, year, and quarter\n  matrixout <- matrix(nrow = length(x), ncol = 0)\n  dowMat <- model.matrix(~factor(DOW) - 1)\n  colnames(dowMat) <- weekdaynames\n  weekendMat <- as.matrix(as.numeric(dowMat[, 6] | dowMat[, 7]))\n  colnames(weekendMat) <- \"Weekend\"\n  weekdayMat <- as.matrix(as.numeric(weekendMat == 0))\n  colnames(weekdayMat) <- \"Weekday\"\n  monMat <- model.matrix(~factor(MONTH) - 1)\n  colnames(monMat) <- monthnames\n  yearMat <- model.matrix(~factor(YEAR) - 1)\n  colnames(yearMat) <- levels(factor(YEAR))\n  quarterMat <- model.matrix(~factor(QUARTER) - 1)\n  colnames(quarterMat) <- quarternames\n  weekMat <- model.matrix(~factor(WEEK) - 1)\n  colnames(weekMat) <- levels(factor(WEEK))\n  domMat <- model.matrix(~factor(MDAY - 1))\n  colnames(domMat) <- levels(factor(MDAY))\n\n\n  # Select the indicated variables and bind to a final output matrix\n  if(is.element(\"all\", tolower(weekdays))){\n    matrixout <- cbind(matrixout, dowMat)\n  }else if(!is.null(weekdays)){\n    matrixout <- cbind(matrixout, dowMat[TRUE, weekdays])\n  }\n  if(is.element(\"all\", tolower(months))){\n    matrixout <- cbind(matrixout, monMat)\n  }else if(!is.null(months)){\n    matrixout <- cbind(matrixout, monMat[TRUE, months])\n  }\n  if(is.element(\"all\", tolower(quarters))){\n    matrixout <- cbind(matrixout, quarterMat)\n  }else if(!is.null(quarters)){\n    matrixout <- cbind(matrixout, quarterMat[TRUE, quarters])\n  }\n  if(is.element(\"all\", tolower(years))){\n    matrixout <- cbind(matrixout, yearMat)\n  }else if(!is.null(years)){\n    matrixout <- cbind(matrixout, yearMat[TRUE, as.character(years)])\n  }\n  if(is.element(\"all\", tolower(weeks))){\n    matrixout <- cbind(matrixout, weekMat)\n  }else if(!is.null(week)){\n    matrixout <- cbind(matrixout, weekMat[TRUE, as.character(weeks)])\n  }\n  if(weekend){\n    matrixout <- cbind(matrixout, weekendMat)\n  }\n  if(weekday){\n    matrixout <- cbind(matrixout, weekdayMat)\n  }\n  if(is.element(\"all\", tolower(quarters))){\n    matrixout <- cbind(matrixout, quarterMat)\n  }else if(!is.null(quarters)){\n    matrixout <- cbind(matrixout, quarterMat[TRUE, as.character(quarters)])\n  }\n  if(is.element(\"all\", tolower(dayOfMonth))){\n    matrixout <- cbind(matrixout, domMat)\n  }else if(!is.null(dayOfMonth)){\n    matrixout <- cbind(matrixout, domMat[TRUE, as.character(dayOfMonth)])\n  }\n  if(leapYear){\n    matrixout <- cbind(matrixout, LY)\n  }\n\n  #Test for colinearity\n  if(rankMatrix(matrixout) < ncol(matrixout)){\n    warning(\"Matrix has perfect colinearity\")\n  }\n  return(matrixout)\n}\n",
    "created" : 1439682547070.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3144628080",
    "id" : "CFC88AD4",
    "lastKnownWriteTime" : 1440122052,
    "path" : "~/designmatrix/R/designMatrix.R",
    "project_path" : "R/designMatrix.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}